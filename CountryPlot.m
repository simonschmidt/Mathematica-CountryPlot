(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["CountryPlot`"]


Unprotect[CountryPlot3D]
Unprotect[CountryPlot]
CountryPlot3D::usage="CountryPlot3D[{{c1, v1},...}] produces a three-dimensional plot whith raised countries
CountryPlot3D[property] plots the CountryData property for all countries";
CountryPlot::usage="CountryPlot[{{c1,v1},...} produces a plot of the countries ci"


Begin["`Private`"]
Unprotect[raisePolygonEdge]
ClearAll[raisePolygonEdge,expandCountries,getRange]



raisePolygonEdge::usage="raisePolygonEdge[polygon, height] Create a thick polygon";
Options[raisePolygonEdge]={"EdgeStyle"->Unevaluated[Sequence[]]};

raisePolygonEdge[p_Polygon,h_?NumericQ,OptionsPattern[]]:=Module[{data=p[[1]],pts},
If[Depth[data]==3,data={data}];
pts=Flatten[Partition[#,2,1]&/@data,1];
{
(* Sides *)
{OptionValue["EdgeStyle"],
Polygon[
{
{#[[1,1]],#[[1,2]],0},{#[[1,1]],#[[1,2]],h},
{#[[2,1]],#[[2,2]],h},{#[[2,1]],#[[2,2]],0}
}&/@pts
]},
(* roof *)
Polygon[data/.{a_?NumericQ,b_?NumericQ}:>{a,b,h}]
}
];
raisePolygonEdge[p_List,h_?NumericQ,opts:OptionsPattern[]]:=p/.{poly_Polygon:>raisePolygonEdge[poly,h,opts]}


(* Expands "Europe" etc *)
expandCountries[c:{_String...}]:=Cases[Flatten[CountryData/@c],_String]


getRange[data_?MatrixQ]:={
Min[#],Max[#]}&/@(data\[Transpose])


(* Does all the work, used by CountryPlot(3D) functions*)
ClearAll[iCountryPlot]
Options[iCountryPlot]={
(* ColorFunction gets arguments height, country,True|False depending on if the country was in the given set or not.
It may return any graphics object *)
ColorFunction->Automatic,
ColorFunctionScaling->True,
"ExtraCountries"->None,
(* ScaleHeight->h scales the height values to lie between 0 and h,
no scaling if False *)
"ScaleHeight"->Scaled[0.1],
"ExtraHeight"->0,
"CartographicProperty"->"SchematicPolygon"
};
iCountryPlot[
data:{{_String,_?NumericQ}..},
opts:OptionsPattern[]]:=
Module[{
scaledCountries,
colorFunction=OptionValue[ColorFunction],
extraopt=OptionValue["ExtraCountries"],
scaleHeight=OptionValue["ScaleHeight"],
extraHeight=OptionValue["ExtraHeight"],
polyType=OptionValue["CartographicProperty"],
countries,extra={},
flatPolys,polys,
styles,
maxHeight,
x,y
},
(* {{c1,h1,True}, ... } *)
countries=PadRight[#,{Length@#,3},True]&@data;
maxHeight=Max[countries[[All,2]]];

scaledCountries=countries;
scaledCountries[[All,2]]=Most@Rescale[Append[scaledCountries[[All,2]],0]];

extra=Switch[
extraopt,
All,CountryData[],
_String,{extraopt},
{_String..},extraopt,
_,{}];

If[Length[extra]>0,
With[{
missing=If[#!={},
PadRight[{#}\[Transpose],{Length@#,3},{False,extraHeight}],
{}
]&@Complement[
expandCountries@extra,
expandCountries@countries[[All,1]]
]},
countries=Join[countries,missing];
scaledCountries=Join[scaledCountries,missing]
]
];

colorFunction=
Switch[
colorFunction,
Automatic,If[#3,ColorData["ThermometerColors"][#1],Gray]&,
_String,
With[{colorFunction=colorFunction},
ColorData[colorFunction][#1]&],
_,colorFunction
];

styles=
If[OptionValue[ColorFunctionScaling],
colorFunction[#1/maxHeight,#2,#3]&,
colorFunction]@@@countries[[All,{2,1,3}]];

flatPolys=CountryData[#1,polyType]&@@@countries;

scaleHeight=Switch[
scaleHeight,
(* portion of maximum side length *)
Scaled[_?NumericQ],scaleHeight[[1]]/maxHeight Max[
#2-#1&@@@getRange@Cases[
flatPolys,
{x_?NumericQ,y_?NumericQ}:>{x,y},
Infinity]
],
_?NumericQ,scaleHeight,
_,1];

{"Polygons"->flatPolys, "Styles"->styles,"Heights"->scaleHeight countries[[All,2]]}

]



ClearAll[CountryPlot]
Options[CountryPlot]=Join[
Options[iCountryPlot],
{},
Options[Graphics]];

CountryPlot[dat:{{_String,_?NumericQ}..},opts:OptionsPattern[]]:=
Module[{
poly,style
},
{poly,style}={
"Polygons","Styles"
}/.iCountryPlot[
dat,
FilterRules[{opts,Options[CountryPlot]},Options[iCountryPlot]]
];
Graphics[
{style,poly}\[Transpose],
FilterRules[{opts,Options[CountryPlot]},Options[Graphics]]
]
]



ClearAll[CountryPlot3D]
Options[CountryPlot3D]=Join[
Options[iCountryPlot],
{
Boxed->False,
"Lighting"->"Neutral"
},
Options[Graphics3D]
];



CountryPlot3D[dat:{{_String,_?NumericQ}..},opts:OptionsPattern[]]:=
Module[{
poly,style,height
},
{poly,style,height}={
"Polygons","Styles","Heights"
}/.iCountryPlot[
dat,
FilterRules[{opts,Options[CountryPlot3D]},Options[iCountryPlot]]
];
poly=raisePolygonEdge@@@Transpose[{poly,height}];

Graphics3D[
{style,poly}\[Transpose],
FilterRules[{opts,Options[CountryPlot3D]},Options[Graphics3D]]]

];



(* Inject the countryplot functions *)
With[{fn=#},
(* Plot a property for whole world *)
fn[prop_String,opts:OptionsPattern[]]:=
fn[
Cases[
{#,CountryData[#,prop]}&/@CountryData[],
{_,_?NumericQ},1],
FilterRules[
{opts,{"ExtraCountries"->All},Options[fn]},
Options[fn]]
];

(* For just some countries *)
fn[countries:{_String..},prop_String,opts:OptionsPattern[]]:=
fn[
Cases[
{#,CountryData[#,prop]}&/@expandCountries[countries],
{_,_?NumericQ},1],
FilterRules[
{opts,{"ExtraCountries"->countries},Options[fn]},
Options[fn]]
];
]&/@{CountryPlot3D,CountryPlot}



Protect[raisePolygonEdge]
End[]
Protect[CountryPlot3D]


EndPackage[]
